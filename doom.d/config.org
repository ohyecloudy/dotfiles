* name, email

  #+begin_src elisp
    (setq user-full-name "Jongbin Oh"
          user-mail-address "ohyecloudy@gmail.com")
  #+end_src

  GPG configuration, email clients, file templates, snippets 등에 사용할 신원 정보 세팅

* default setting

  #+begin_src elisp
    ;; If you use `org' and don't want your org files in the default location below,
    ;; change `org-directory'. It must be set before org loads!
    (setq org-directory "~/org/")

    ;; Whenever you reconfigure a package, make sure to wrap your config in an
    ;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
    ;;
    ;;   (after! PACKAGE
    ;;     (setq x y))
    ;;
    ;; The exceptions to this rule:
    ;;
    ;;   - Setting file/directory variables (like `org-directory')
    ;;   - Setting variables which explicitly tell you to set them before their
    ;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
    ;;   - Setting doom variables (which start with 'doom-' or '+').
    ;;
    ;; Here are some additional functions/macros that will help you configure Doom.
    ;;
    ;; - `load!' for loading external *.el files relative to this one
    ;; - `use-package!' for configuring packages
    ;; - `after!' for running code after a package has loaded
    ;; - `add-load-path!' for adding directories to the `load-path', relative to
    ;;   this file. Emacs searches the `load-path' when you load packages with
    ;;   `require' or `use-package'.
    ;; - `map!' for binding new keys
    ;;
    ;; To get information about any of these functions/macros, move the cursor over
    ;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
    ;; This will open documentation for it, including demos of how they are used.
    ;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
    ;; etc).
    ;;
    ;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
    ;; they are implemented.
  #+end_src

* emacs-server

  #+begin_src elisp
    (require 'server)
    (server-start)
  #+end_src

  외부에서 파일을 =emacsclientw.exe= 파일을 사용해 현재 열려있는 emacs 인스턴스에 열도록 지원한다

* look

  #+begin_src elisp
    (setq frame-title-format "%b")
  #+end_src

  버퍼 파일 이름을 타이틀바로 표시한다

* hangul

  #+begin_src elisp
    ;; input method도 엮여 있어서 Korean으로 설정 후 utf-8 개별 세팅이 편한다
    (set-language-environment "Korean")
    ;; 한글 환경에서는 cp949 인코딩이 디폴트이기 때문에 utf-8로 세팅
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq-default buffer-file-coding-system 'utf-8)
    (if (fboundp 'w32-set-system-coding-system)
        (w32-set-system-coding-system 'utf-8))
    ;; 날짜 표시를 영어로한다. org mode에서 time stamp 날짜에 영향을 준다.
    (setq system-time-locale "C")
    (setenv "LANG" "en_US.UTF-8")
    (setenv "LC_ALL" "en_US.UTF-8")
  #+end_src

  #+begin_src elisp
    (when IS-WINDOWS
      (set-clipboard-coding-system 'cp949))
  #+end_src

  윈도에서는 클립보드 코딩 시스템을 시스템에 맞춰 =cp949= 로 세팅한다.

* font

  #+begin_src org :tangle no
    | 12345678 |   |
    |----------+---|
    | 일이삼사 |   |
  #+end_src

  한글만 크기를 키워서 맞출 수 있는데, 조화롭지 못하다. 참고삼아 보기만 하고 이걸 꼭 맞추려고 노력하지는 않는다.

** macOS

   #+begin_src elisp
     (after! doom-themes
       (when IS-MAC
         (set-frame-font "Consolas-14" nil t)
         (set-fontset-font t 'hangul (font-spec :name "D2Coding"))
         (setq-default line-spacing 3)
         )
       )
   #+end_src

   =doom-font= 심볼에 폰트를 바인딩하면 한글 폰트만 D2Coding으로 변경하는 설정이 제대로 동작하지 않는다. 그래서 무식하게 세팅한다.

** windows

   #+begin_src elisp
     (after! doom-themes
       (when IS-WINDOWS
         (set-frame-font "Consolas-11" nil t)
         (set-fontset-font t 'hangul (font-spec :name "D2Coding"))
         (setq-default line-spacing 3)
         )
       )
   #+end_src

* startup

  #+begin_src elisp
    (setq initial-frame-alist '((fullscreen . maximized)))
  #+end_src

  귀한 emacs. 최대 크기로 시작한다.

* M-x keybinding

  #+begin_src elisp
    (global-set-key (kbd "C-x C-m") 'execute-extended-command)
  #+end_src

  =M-x= 키가 =alt= 키를 눌러야 해서 불편하다. =C-x C-m= 키로도 호출할 수 있게 변경

* tab -> space

  #+begin_src elisp
    (setq indent-tabs-mode nil)
  #+end_src

* cc-mode

  #+begin_src elisp
    (setq-default c-default-style "bsd"
                  c-basic-offset 4)
  #+end_src

* input

  #+begin_src elisp
    (setq +default-want-RET-continue-comments nil)
  #+end_src

  =RET= 키를 눌렀을 때, 코멘트가 연결되는 기능을 끈다. 한 줄 코멘트가 많아 오히려 번거롭다.

* packages

** doom theme

   #+begin_src elisp
     (setq
      doom-theme 'doom-vibrant
      doom-themes-enable-bold nil
      doom-themes-enable-italic nil)
   #+end_src

   한글이 많은 경우 bold, italic 시인성이 별로라서 꺼놓는다.

   #+begin_src elisp
     (doom-themes-visual-bell-config)
   #+end_src

   modeline에 visual bell을 표시한다. 시인성이 좋음.

** org

*** org-roam

    #+begin_src elisp
      (setq org-roam-directory (file-truename "~/org_roam"))
    #+end_src

*** org settings

    #+begin_src elisp
      (after! org
        (setq
         ;; quote와 verse block도 배경 색상을 바꾼다
         org-fontify-quote-and-verse-blocks t
         ;; heading *를 한 개만 보여준다.
         org-hide-leading-stars t
         ;; done 해드라인 폰트 변경을 하지 않는다. 색상 때문에 doom theme 변경시 제대로 안 보임
         org-fontify-done-headline nil
         ;; 9.5부터 default 값이 바뀜
         org-adapt-indentation t
         ;; modeline에 보이는 org clock 정보가 너무 길어서 줄임
         org-clock-string-limit 30
         ;; 트리를 접을 때, heading 사이에 빈 라인을 없앤다
         org-cycle-separator-lines 0
         ;; 순서 없는 목록(unordered list)에서 bullet으로 들여쓰기를 할 때마다 +, -를 번갈아 사용한다
         org-list-demote-modify-bullet '(("+" . "-") ("-" . "+"))
         ;; #+STARTUP: fold 를 기본값으로 한다. org 파일을 열었을 때, overview를 가장 먼저 보고 싶기 때문
         org-startup-folded t
         )
        )
    #+end_src

    ui 관련 설정들

    #+begin_src elisp
      (after! org
        (setq org-startup-indented nil
              org-src-preserve-indentation nil
              )
        )
    #+end_src

    emacs에서 org mode일 때, indentation을 적용하는 기능을 끈다. 이 기능을 끄면 emacs가 아닌 다른 에디터로 org 파일을 볼 때도 space로 indentation을 적용한 상태이다.

    이 상태에서 =org-src-preserve-indentation= 심볼에 nil이 아닌 값이 바인딩되었다면 소스 코드 블럭이 heading 본문 indentation과 상관없이 라인 앞에 붙어 있다. 원래 소스 코드의 indentation을 유지하기 때문이다. 소스 코드 블럭도 똑같이 indentation을 지키도록 =nil= 값을 바인딩한다.

    #+begin_src elisp
      (after! org
        (setq org-todo-keywords
              '((sequence
                 "TODO"
                 "STARTED"
                 "|"
                 "DONE"))
              org-todo-keyword-faces
              '(("STARTED" . +org-todo-active)))
        )
    #+end_src

    org 모듈에서 정의한 =+org-todo-active= 페이스를 사용하기에 org 모듈을 로드한 후에 실행해야 한다.

    #+begin_src elisp
      (after! org
        (setq org-blank-before-new-entry
              '((heading . t) (plain-list-item . nil))
              )
        )
    #+end_src

    heading 사이에는 반드시 빈 줄이 들어가게 한다. plan list item 사이에는 무조건 제거한다.

    #+begin_src elisp
      (after! evil-org
        (map! :map evil-org-mode-map
              :ni [C-return]   #'org-insert-heading-respect-content
              :ni [C-S-return] #'org-insert-todo-heading-respect-content
              )
        )
    #+end_src

    doom에서 =C-RET= 키는 아래에 추가 =C-S-RET= 키는 위로 추가로 바인딩을 변경한다. 새로 함수를 추가해서 해당 함수에 바인딩하는데, 해당 함수에 =org-blank-before-new-entry= 심볼 값이 반영이 안 되어 있어서 org mode의 디폴트 함수로 바인딩을 했다.

    =evil-org= 모드 맵도 똑같이 수정한다.

    #+begin_src elisp
      (after! org
        (setq org-M-RET-may-split-line '((default . t)))
        )
    #+end_src

    =M-RET= 키로 라인을 분리할 수 있게 한다. org module에서 nil 값을 바인딩한 걸 디폴트 값으로 돌림.

    #+begin_src elisp
      (defun my-org-clock-in-if-starting ()
        "Clock in when the task is marked STARTED."
        (when (and (string= org-state "STARTED")
                   (not (string= org-last-state org-state)))
          (org-clock-in)))
      (add-hook 'org-after-todo-state-change-hook
                'my-org-clock-in-if-starting)
      (advice-add 'org-clock-in
                  :after (lambda (&rest _)
                           (org-todo "STARTED")))
      ;; 다른 org-clock 시작으로 clock-out 됐을 때, todo도 바꿔준다
      (add-hook 'org-clock-out-hook
                (lambda ()
                  (when (and (boundp 'org-state)
                             (string= org-state "STARTED"))
                    (org-todo "DONE"))))
    #+end_src

    =STARTED= 키워드로 변경하면 =org-clock= 을 시작한다. =TODO= 상태에서 =STARTED= 상태로 변경되면 자동으로 시간 기록이 되게 하려고 추가한 기능. [[http://ohyecloudy.com/emacsian/2017/07/01/org-clocking-time-with-emacs-todo-state/][#orgmode TODO 상태와 org-clock은 같이 움직인다 - ohyecloudy.com]] 참고

    #+begin_src elisp
      (after! org-clock
        (setq org-clock-persist-query-resume nil)
        )
    #+end_src

    active clock이 있을 때, 물어보지 않고 재개한다. [[http://ohyecloudy.com/emacsian/2017/10/14/org-clock-persistence/][#orgmode emacs를 꺼도 org-clock은 굴러간다 - ohyecloudy.com]] 참고

    #+begin_src elisp
      (after! org-clock
        (setq org-clock-idle-time 15)
        )
    #+end_src

    15분을 자리비움 감지 기준으로 설정. [[http://ohyecloudy.com/emacsian/2017/11/04/org-dealing-with-idle-time/][#orgmode idle 시간 다루기 - ohyecloudy.com]] 참고

    #+begin_src elisp
      (after! org
        ;; org-set-effort 함수 실행 시 나오는 preset 리스트
        (setq org-global-properties
              '(("Effort_ALL" .
                 "1:00 2:00 3:00 4:00 8:00 16:00 24:00 32:00 40:00 0:30")))
        ;; hotkey 1    2    3    4    5    6     7     8     9     0

        ;; org-columns에서 effort를 볼 수 있게 추가
        (setq org-columns-default-format "%50ITEM(Task) %10Effort{:} %10CLOCKSUM")

        ;; org-clock-report 기본 프로퍼티
        (setq org-clock-clocktable-default-properties
              '(:maxlevel 2 :scope file :narrow 30! :properties ("effort")))

        )
    #+end_src

    추정 시간에 관련된 설정. 추정 시간 입력시 preset 리스트를 추가하고 =org-columns= 명령과 =org-clock-report= 명령에서 추정 시간을 볼 수 있게 세팅. [[http://ohyecloudy.com/emacsian/2017/09/09/org-effort-estimates/][#orgmode 추정(estimate) 작업 시간 기록 - ohyecloudy.com]] 참고

    #+begin_src elisp
      (after! org
        (setq org-duration-format (quote h:mm))
        )
    #+end_src

    기간 포맷으로 시간:분 사용. 24시가 넘어갈 때, 1d로 표현하는 게 보기 싫어서 세팅. [[http://ohyecloudy.com/emacsian/2017/11/25/org-duration-format/][#orgmode 하루가 넘어가도 clock table 기간 필드에 시간과 분으로만 표시 - ohyecloudy.com]] 참고

    #+begin_src elisp
      (after! org
        (defun org-columns-with-visual-line-mode ()
          (interactive)
          (org-columns)
          (visual-line-mode))
        )
    #+end_src

    =org-columns= 모드를 켤 때, 자동 줄바꿈을 해주는 =visual-line-mode= 를 활성화한다. [[http://ohyecloudy.com/emacsian/2020/03/15/org-column-view-with-visual-line-mode/][#orgmode column view를 활성화하면 꺼지는 줄 바꿈(word wrap)을 켜는 방법 - ohyecloudy.com]] 참고

    #+begin_src elisp
      (after! org
        (setq org-show-notification-handler (lambda (notification) (message notification)))
        )
    #+end_src

    쓴 시간이 effort를 넘었을 때, 나오는 desktop notification을 끈다. Task 'some tasks' should be finished by now. (1:00)

    #+begin_src elisp
      (defun my-org-open-at-point-current-buffer ()
        "open file in current buffer"
        (interactive)
        (let ((org-link-frame-setup (cons (cons 'file 'find-file-other-window) org-link-frame-setup)))
          (org-open-at-point)))

      (after! evil-org
        (map! :map evil-org-mode-map
              :ni "C-c C-RET"      #'my-org-open-at-point-current-buffer
              :ni "C-c C-<return>" #'my-org-open-at-point-current-buffer
              )
        )
    #+end_src

    현재 윈도우에서 파일을 여는 게 기본 동작이다. 기본 동작을 유지하고 =C-c C-RET= 키로는 다른 윈도로 링크를 열게 한다.

    #+begin_src elisp
      (after! org
        (setq org-enforce-todo-dependencies nil))
    #+end_src

    자식 todo가 완료되어야만 부모 heading을 done으로 바꿀 수 있는 제한을 푼다. org clock out을 DONE 상태와 연동해서 사용하기 때문.

    #+begin_src elisp
      (after! org
        (setq org-tag-alist '((:startgroup . nil)
                              ("blogging" . ?b)
                              (:endgroup . nil))
              )
        )
    #+end_src

    미리 정의된 tag를 설정

*** org-cliplink

    #+begin_src elisp
      (defun my-org-cliplink ()
        (interactive)
        (org-cliplink-insert-transformed-title
         (org-cliplink-clipboard-content)     ;take the URL from the CLIPBOARD
         #'my-org-link-transformer))

      (defun my-org-link-transformer (url title)
        (let* ((parsed-url (url-generic-parse-url url)) ;parse the url
               (host-url (replace-regexp-in-string "^www\\." "" (url-host parsed-url)))
               (clean-title
                (cond
                 ;; if the host is github.com, cleanup the title
                 ((string= (url-host parsed-url) "github.com")
                  (replace-regexp-in-string "^/" ""
                                            (car (url-path-and-query parsed-url))))
                 ;; (replace-regexp-in-string "GitHub - .*: \\(.*\\)" "\\1" title))
                 ((string= (url-host parsed-url) "www.youtube.com")
                  (replace-regexp-in-string "\\(.*\\) - Youtube" "\\1" title))
                 ;; otherwise keep the original title
                 (t title)))
               (title-with-url (format "%s - %s" clean-title host-url)))
          ;; forward the title to the default org-cliplink transformer
          (org-cliplink-org-mode-link-transformer url title-with-url)))
    #+end_src

    마지막에 host를 붙이고 싶어서 link transformer 함수를 짰다. =title - ohyecloudy.com= 식으로 org link를 만든다.

    #+begin_src elisp
      (after! org
        (define-key org-mode-map [remap org-cliplink] 'my-org-cliplink)
        )
    #+end_src

    =org-clinklink= 함수에 바인딩된 키를 =my-org-cliplink= 로 바인딩한다

*** ox-gfm

    #+begin_src elisp :tangle packages.el
      (package! ox-gfm)
    #+end_src

    =C-c C-e= 키로 =org-export-dispatch= 함수를 호출하면 Github Flavored Markdown으로 export할 수 있다

    [[https://github.com/larstvei/ox-gfm][larstvei/ox-gfm - github.com]]

*** org babel

**** ob-translate

     #+begin_src elisp :tangle packages.el
       (package! ob-translate)
     #+end_src

     #+begin_src elisp
       (setq ob-translate:default-dest "ko")
     #+end_src

     #+RESULTS:
     : ko

     #+begin_src translate :src en :dest ko :tangle no
       Doom is a configuration framework for GNU Emacs tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.
     #+end_src

     #+RESULTS:
     : Doom은 프레임워크의 프레임워크가 적고 패키지 관리자의 약간의 안정성(및 재현성)과 수동 구성(또는 그 이상)의 성능을 원하는 Emacs 파산 베테랑을 위해 맞춤화된 GNU Emacs용 구성 프레임워크입니다. Emacs 애호가가 선호하는 운영 체제에 대해 자세히 알아볼 수 있는 자체 구성 또는 리소스의 기초가 될 수 있습니다.

     [[https://github.com/krisajenkins/ob-translate][krisajenkins/ob-translate - github.com]]

     #+begin_example
       google-translate--search-tkk: Search failed: ",tkk:'"
     #+end_example

     이런 에러 메시지가 뜬다.

     #+begin_src elisp
       (defun google-translate--search-tkk ()
         "Search TKK."
         (list 430675 2721866130))
     #+end_src

     [[https://github.com/atykhonov/google-translate/issues/137][atykhonov/google-translate/issues/137 - github.com]] 글을 참고해서 =google-translate--search-tkk= 함수를 재정의함

**** ob-http

     #+begin_src elisp :tangle packages.el
       (package! ob-http)
     #+end_src

     #+begin_src elisp
       (org-babel-do-load-languages 'org-babel-load-languages
                                    (append org-babel-load-languages
                                            '((http . t)))
                                    )
     #+end_src

     [[https://github.com/zweifisch/ob-http][zweifisch/ob-http - github.com]]

     src 블럭으로 http 응답을 사용할 수 있다.

     #+begin_src http :pretty :tangle no
       GET https://api.github.com/repos/ohyecloudy/dotfiles/languages
     #+end_src

     #+RESULTS:
     #+begin_example
     {
       "Emacs Lisp": 126668,
       "Shell": 90476,
       "YASnippet": 9424,
       "Batchfile": 3991,
       "Vim script": 2181,
       "Python": 945,
       "JavaScript": 719,
       "AutoHotkey": 405
     }
     #+end_example

*** org-cv

    #+begin_src elisp :tangle packages.el
      (package! ox-moderncv
        :recipe (:host github :repo "ohyecloudy/org-cv"))
    #+end_src

    #+begin_src elisp
      (require 'ox-moderncv)
    #+end_src

    org 문서를 moderncv로 export하는 패키지를 설치한다.

** doom-modeline

   #+begin_src elisp
     (after! doom-modeline
       (setq
        ;; 현재 위치를 쬐깐하게 보여준다
        doom-modeline-hud t
        ;; 경로가 아니라 파일 이름만 모드라인에 보여준다. 'auto는 경로를 출력한다
        ;; tramp로 원격 파일 편집시 느려지는 경험을 완화해준다고 한다
        doom-modeline-buffer-file-name-style 'file-name
        )
       )
   #+end_src

   doom-modeline 추가 설정

** magit

   #+begin_src elisp
     (after! magit
       (setq magit-save-repository-buffers 'dontask)
       )
   #+end_src

   magit status를 실행하면 묻지 않고 수정한 버퍼를 저장한다

** projectile

   #+begin_src elisp
     (after! projectile
       (setq projectile-indexing-method 'hybrid)
       )
   #+end_src

   =.git= 디렉터리를 같이 사용하는 인덱싱

** helm

   #+begin_src elisp
     (after! helm
       (setq helm-move-to-line-cycle-in-source t
             ;; 같은 명령 히스토리가 연속으로 쌓이지 않게 한다
             history-delete-duplicates t
             history-length 10
             )
       )
   #+end_src

   =helm-move-to-line-cycle-in-source= 변수를 세팅했기 때문에 다른 소스로 넘어가려면 =C-o= 키를 누르면 된다.

** company

   #+begin_src elisp
     (after! company
       (setq company-show-quick-access t)
       )
   #+end_src

   =M-1=, =M-0= 까지 숫자로 빠르게 삽입할 수 있는데, 그 숫자를 옆에 출력하게 한다.

** request

   #+begin_src elisp :tangle packages.el
     (package! request)
   #+end_src

   http를 쉽게 사용할 수 있는 request 패키지
   [[https://github.com/tkf/emacs-request][tkf/emacs-request - github.com]]

** mermaid

   #+begin_src elisp :tangle packages.el
     (package! mermaid-mode)
     (package! ob-mermaid)
   #+end_src

   mermaid 구문 강조와 들여쓰기 등을 지원하는 [[https://github.com/abrochard/mermaid-mode][abrochard/mermaid-mode]]를 설치한다. 그리고 org mode에서 mermaid 소스 코드 블럭을 사용할 수 있게 하는 [[https://github.com/arnm/ob-mermaid][arnm/ob-mermaid]]도 추가로 설치한다.

   #+begin_src elisp
     (after! ob-mermaid
       (org-babel-do-load-languages 'org-babel-load-languages
                                    (append org-babel-load-languages
                                            '((mermaid . t)))
                                    )
       )
   #+end_src

   org-babel 언어로 =mermaid= 를 추가해서 소스 코드 블럭 컴파일을 할 수 있게 한다.

   #+begin_src elisp
     (when IS-WINDOWS
       (setq mermaid-mmdc-location "~/bin.local/mermaid-cli/node_modules/.bin/mmdc.cmd"))
   #+end_src

   #+begin_src elisp
     (when IS-WINDOWS
       (setq ob-mermaid-cli-path "~/bin.local/mermaid-cli/node_modules/.bin/mmdc.cmd"))
   #+end_src

   windows에서는 직접 설치하고 경로를 지정한다.

** evil

   #+begin_src elisp
     (setq! evil-want-C-w-delete nil)
   #+end_src

   =insert mode= 에서 =C-w= 키를 입력할 때, back word를 지우는 기능을 끈다. 창 전환 키랑 헷갈려서 실수로 단어를 지우는 경우가 많았다.

   #+begin_src elisp
     (after! evil
       (evil-select-search-module 'evil-search-module 'isearch))
   #+end_src

   folded 컨텐츠 검색이 안 되서 workaround 적용. [[https://github.com/doomemacs/doomemacs/issues/6478][doomemacs/doomemacs/issues/6478 - github.com]] 참고

   #+begin_src elisp
     (after! evil
       (setq evil-complete-all-buffers nil)
       )
   #+end_src

   현재 버퍼를 대상으로 완성(completion) 후보를 추린다. 기본값은 열려 있는 전체 버퍼 대상. =C-n=, =C-p= 키 바인딩에서 사용한다.

   #+begin_src elisp
     (after! evil
       (add-hook 'evil-insert-state-exit-hook
                 (lambda ()
                   (setq evil-input-method nil)))
       )
   #+end_src

   편집 모드를 나갈 때, 입력기(input method)를 초기화 시킨다. 편집 모드로 들어갈 때, 무조건 영문을 기본으로 해서 이전 편집 모드에서 한글을 입력하던 중이었는지 영문을 입력하던 중이었는지 생각할 필요가 없게 한다. 편집 모드로 들어갈 때, 이전 상태를 기억 못하거나 모드 라인(mode line)에 표시된 입력기 상태를 못 봐서 잘못 입력하는 실수를 줄이려고 통일한다.

   #+begin_src elisp
     (setq +evil-want-o/O-to-continue-comments nil)
   #+end_src

   주석을 연속해서 쓰는 경우가 적어서 오히려 불편하다

** lsp

   #+begin_src elisp
     (after! lsp-mode
       (setq lsp-pwsh-code-formatting-preset "Allman")
       )
   #+end_src

   [[https://en.wikipedia.org/wiki/Indentation_style#Allman_style][Allman]] 스타일로 포맷팅한다.

   #+begin_src elisp
     (after! lsp-mode
       (setq lsp-pwsh-code-formatting-pipeline-indentation-style "IncreaseIndentationForFirstPipeline")
       )
   #+end_src

   파이프라인 들여쓰기를 해서 더 보기 좋게 한다.

   참고: [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pwsh/][Powershell - LSP Mode - LSP support for Emacs - emacs-lsp.github.io]]

   #+begin_src elisp
     (when IS-WINDOWS
       (after! lsp-mode
         (setq lsp-csharp-omnisharp-roslyn-download-url
               (concat "https://github.com/omnisharp/omnisharp-roslyn/releases/latest/download/"
                       "omnisharp-win-x64-net6.0.zip"
                       )
               )
         )
       )
   #+end_src

   windows에서는 =omnisharp-win-x64.zip= 파일을 다운로드 받고 있어서 직접 지정

** consult

   #+begin_src elisp
     (when IS-WINDOWS
       (after! consult
         (setq consult-locate-args "es")
         )
       )
   #+end_src

   [[https://github.com/git-for-windows/build-extra][Git for Windows SDK]]로 설치한 =locate= 프로그램이 제대로 동작하지 않는다. windows에서 더 최적화된 [[https://www.voidtools.com/ko-kr/][Everything]]을 파일 찾기에 사용한다.

* syntax

  #+begin_src elisp
    (add-hook! 'emacs-lisp-mode-hook
               #'(lambda ()
                   (modify-syntax-entry ?_ "w")
                   (modify-syntax-entry ?- "w")))
    (add-hook! 'c-mode-common-hook
               #'(lambda () (modify-syntax-entry ?_ "w")))
    (add-hook! 'elixir-mode-hook
               #'(lambda ()
                   (modify-syntax-entry ?_ "w")
                   (modify-syntax-entry ?: ".")
                   (modify-syntax-entry ?% ".")))
  #+end_src

  =kebab-case=, =snake_case= 처리 친화적으로 문자를 word로 추가한다. [[http://ohyecloudy.com/emacsian/2017/12/16/evil-syntax-table-kebab-case-snake-case-friendly/][#evilmode kebab-case, snake_case 처리 친화적으로 - '_' 문자나 '-' 문자를 word 취급]] 참고

* my packages

  #+begin_src elisp
    (add-load-path! (expand-file-name "lisp/" doom-user-dir))
  #+end_src

  =c44bc81a05= commit id에서 =9d4d5b756a= commit id로 업데이트한 이후로 =(add-load-path! "lisp")= 가 동작하지 않는다. =load-path= 변수를 확인해본 결과 =.doom.d= 디렉터리가 아니라 =.emacs.d= 디렉터리를 기준으로 =lisp= 디렉터리가 =load-path= 로 추가된 걸 확인했다. 그래서 =doom-user-dir= 을 기준으로 한 load path를 계산해 명시적으로 할당한다.

** build-link-section

   #+begin_src elisp
     (require 'build-link-section)
   #+end_src

   =M-x my/build-link-section= 함수로 본문에 있는 링크를 수집해서 링크 org heading을 만들어준다.

   참고: [[http://ohyecloudy.com/emacsian/2022/05/28/create-link-section-by-scraping-links-from-current-org-docs/][org 문서에서 링크를 긁어서 링크 섹션을 만들기 - ohyecloudy.com]]

** ox-confluence

   #+begin_src elisp
     (require 'my-ox-confluence)
   #+end_src

   [[https://github.com/aspiers/orgmode/blob/master/contrib/lisp/ox-confluence.el][aspiers/orgmode/blob/master/contrib/lisp/ox-confluence.el - github.com]] 파일을 가져와서 조금 고친 패키지. confluence 마크업으로 익스포트를 지원한다.

** ox-taskjuggler

   #+begin_src elisp :tangle no
     (require 'my-ox-taskjuggler)
     (progn
       (load-file (expand-file-name "lisp/taskjuggler-setting.el" user-emacs-directory))
       (setq org-taskjuggler-reports-directory "~/taskjuggler")
       ;; 넉넉하게 잡아놔서 Error: Some tasks did not fit into the project time frame. 에러가 안 뜨게 한다
       (setq org-taskjuggler-default-project-duration 999)
       )
   #+end_src

   org 문서를 [[https://taskjuggler.org/][taskjuggler]]로 익스포트 해주는 패키지. 파일을 가져와서 조금 고쳤다. 현재는 사용하지 않아서 사용할 일이 생기면 활성화할 계획이다.

** gitlab

   #+begin_src elisp
     (require 'my-gitlab)
     (require 'legacy-gitlab)
   #+end_src

   gitlab을 사용하면서 만들어놓은 함수

** ob-csharp

   #+begin_src elisp
     (require 'ob-cs)

     (org-babel-do-load-languages 'org-babel-load-languages
                                  (append org-babel-load-languages
                                          '((cs . t)))
                                  )

     (after! org
       (add-to-list 'org-src-lang-modes '("cs" . "csharp"))
       )
   #+end_src

   [[https://github.com/thomas-villagers/ob-csharp][ob-csharp]]에 [[https://github.com/dotnet-script/dotnet-script ][dotnet-script]]를 사용한 [[https://github.com/thomas-villagers/ob-csharp/pull/2][PR]]을 적용했다.

   doom emacs에서 org-contrib를 로드할 때, ob-csharp을 로드한다. 이걸 갈아치는 방법을 못 찾아서 이름을 바꿔서 적용한다.

   #+begin_src org :tangle no
     ,#+begin_src cs
       Console.WriteLine("hello org babel")
     ,#+end_src
   #+end_src

   source code 이름은 =cs= 를 사용한다.

** my-search

   #+begin_src elisp
     (require 'my-search)
   #+end_src

   emacs에서 편하게 웹페이지를 열 수 있는 함수를 모아둔 패키지. [[http://ohyecloudy.com/emacsian/2021/06/20/interactive-function-that-opens-in-a-web-browser/][원하는 URL을 조합해 웹브라우저로 여는 대화형 함수 만들기 - elixir 문서 편하게 검색 - ohyecloudy.com]] 참고.

   #+begin_src elisp
     (map! :leader
           (:prefix-map ("S" . "custom search")
            :desc "google"           "g"     #'my/search-google
            :desc "naver"            "n"     #'my/search-naver
            :desc "dict"             "d"     #'my/search-dict
            :desc "dotnet"           "D"     #'my/search-dotnet
            :desc "onelook"          "e"     #'my/search-onelook
            :desc "thesaurus"        "t"     #'my/search-thesaurus
            :desc "elixir"           "x"     #'my/search-elixir
            :desc "flutter"          "f"     #'my/search-flutter
            :desc "my blogs"         "b"     #'my/search-blogs
            )
           )
   #+end_src

   검색 함수를 키에 바인딩함

* my functions

  #+begin_src elisp
    ;;; http://emacsredux.com/blog/2013/03/27/copy-filename-to-the-clipboard/
    (defun copy-file-name-to-clipboard ()
      "Copy the current buffer file name to the clipboard."
      (interactive)
      (let ((filename (if (equal major-mode 'ranger-mode)
                          default-directory
                        (buffer-file-name))))
        (when filename
          (kill-new filename)
          (message "Copied buffer file name '%s' to the clipboard." filename))))

    (defun jekyll-default-image ()
      (interactive)
      (let ((name (format "{{ site.asseturl }}/%s-00.jpg"
                          (file-name-base (buffer-file-name)))))
        (kill-new name)
        (message "Copied default image name '%s' to the clipboard." name)))

    (defun toggle-camelcase-underscores ()
      "Toggle between camelcase and underscore notation for the symbol at point."
      (interactive)
      (save-excursion
        (let* ((bounds (bounds-of-thing-at-point 'symbol))
               (start (car bounds))
               (end (cdr bounds))
               (currently-using-underscores-p (progn (goto-char start)
                                                     (re-search-forward "_" end t))))
          (if currently-using-underscores-p
              (progn
                (upcase-initials-region start end)
                (replace-string "_" "" nil start end)
                (downcase-region start (1+ start)))
            (replace-regexp "\\([A-Z]\\)" "_\\1" nil (1+ start) end)
            (downcase-region start (cdr (bounds-of-thing-at-point 'symbol)))))))

    (require 'subr-x)
    (defun open-issue-page ()
      (interactive)
      (when (not (boundp 'issue-base-page)) (throw 'issue-base-page "not bound"))
      (let* ((line (thing-at-point 'line))
             ;; issue number를 못 찾았을 때, number가 nil이 되야 하는데, 공백 문자가 들어간다
             ;; 원인을 못 찾아서 string trim을 한 후 길이를 재서 검사한다.
             (number (find-issue-number line)))
        (if (> (length (string-trim number)) 0)
            (browse-url (format "%s/%s" issue-base-page number))
          (message "failed find issue number - %s" line))))

    (defun find-issue-number (line)
      (save-match-data
        (string-match "#\\([0-9]+\\)" line)
        (match-string 1 line)))

    (defun unevernotify ()
      (interactive)
      (while (re-search-forward "\u00a0" nil t)
        (replace-match " "))
      )
  #+end_src

* windows coding system

  #+begin_src elisp
    (when IS-WINDOWS
      (setq default-process-coding-system '(utf-8 . cp949))
      )
  #+end_src

  windows에서는 프로세스로 보내는 coding system을 cp949로 고정한다. =bashrc= 에서 =chcp.com 65001= 을 실행하게 해도 =rg.exe= 파일을 실행하는 프로세스에 =utf-8= 인코딩으로 보내면 동작하지 않는다. 정확한 원인은 찾지 못했다.

* =browse-url= 에서 사용하는 프로그램을 =chrome= 으로 변경

  #+begin_src elisp
    (when IS-WINDOWS
      (setq browse-url-chrome-program "run-chrome.bat")
      (setq browse-url-handlers
            '(("nexon.com" . browse-url-default-browser)
              ("." . browse-url-chrome)))
      )
  #+end_src

  윈도우에서는 기본 브라우저를 =chrome= 이 아닌 다른 프로그램으로 설정할 때가 많아서 emacs에서 url로 열 때는 =chrome= 으로 고정. 이후 macOS에도 일괄 적용.

* TODO windows 특수 설정

  #+begin_src elisp :tangle no
    ;; windows에서 shell을 사용할 때, windows에서 사용하는 code page도 UTF-8로 변경한다
    ;; 그렇게 하려고 -l 옵션을 붙여서 로그인을 한다. 그 결과 interactive 모드로 셸을 실행한다
    ;; interactive 모드로 실행해서 ~/.bashrc 셸 스크립트 파일을 실행하게 한다.
    ;; ~/.bashrc 파일에서 windows일 때, chcp.com 65001 명령을 실행해서 code page도 UTF-8로 변경한다.
    ;;
    ;; -i 옵션은 job control 생성을 못해서 대신 -l 옵션을 사용했다.
    ;; bash: cannot set terminal process group (-1): Inappropriate ioctl for device
    ;; bash: no job control in this shell
    (when windows?
      (setq shell-command-switch "-lc")
      )

    ;;; https://github.com/syohex/emacs-helm-ag
    (use-package helm-ag
      :config
      ;; windows에서만 문제가 발생
      (when windows?
        (setq original-default-process-coding-system default-process-coding-system)
        ;; the silver searcher(ag)는 cp949로 동작한다.
        ;; windows에서 실행하는 bash의 codepage를 65001로 변경하지 않았기 때문
        ;; 그래서 ag를 실행할 때만 cp949로 변경하고 끝나면 원래 process coding system 값으로 돌린다
        (advice-add 'helm-do-ag
                    :before (lambda (&rest _)
                              (setq default-process-coding-system
                                    '(korean-iso-8bit-dos . korean-iso-8bit-unix))))
        (advice-add 'helm-do-ag
                    :after (lambda (&rest _)
                             (setq default-process-coding-system
                                   original-default-process-coding-system)))
        )
      )

    ;;; shell
    (when windows?
      (let* ((combine-path (lambda (dir dir-or-file)
                             (concat (file-name-as-directory dir) dir-or-file)))
             (base-dir "C:/git-sdk-64")
             (mingw64-bin-dir (funcall combine-path base-dir "mingw64/bin"))
             (msys2-bin-dir (funcall combine-path base-dir "usr/bin"))
             (bash-path (funcall combine-path msys2-bin-dir "bash.exe")))
        (add-to-list 'exec-path msys2-bin-dir)
        (add-to-list 'exec-path mingw64-bin-dir)
        (setq explicit-shell-file-name bash-path)
        (setq shell-file-name bash-path)
        (setenv "SHELL" bash-path)
        (setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
        (setenv "PATH" (concat mingw64-bin-dir path-separator
                               (concat msys2-bin-dir path-separator
                                       (getenv "PATH"))))))
  #+end_src

  windows에 설치해봐야 잘 되는지 알겠다.

* TODO 설정

  #+begin_src elisp :tangle no
    ;; tab으로 electic pair 밖으로 나올 수 있게 한다
    ;; https://www.reddit.com/r/emacs/comments/3n1j4x/anyway_to_tab_out_of_parentheses/
    (progn
      (defun smart-tab-jump-out-or-indent (&optional arg)
        (interactive "P")
        (let ((closings (mapcar #'cdr electric-pair-pairs))
              (after (char-after)))
          (if (member after closings)
              (forward-char 1)
            (indent-for-tab-command arg))))

      (global-set-key [remap indent-for-tab-command] 'smart-tab-jump-out-or-indent)
      )
  #+end_src
